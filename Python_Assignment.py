# -*- coding: utf-8 -*-
"""Assigment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jpt7neEkbGR8RSkmqe_P04wsVWsAww-p
"""

#1.Write a python program to sum of the first n positive integer
n = int(input("Enter a number:="))
sum = (n*(n+1))/2
print("Positive Integer",sum)

#2.Write a Python program to count occurrences of a substring in a string.
string = "Hello World! Hello Friend"
count_string = string.count("Hello")
print("Count of a substring:=",count_string):

#3. Write a Python program to count the occurrences of each word in a givensentence.
str1 = " Hii ! I am BCA Student , Hii "
words = str1.split()
wc = {}
for words in words:
  if words in wc:
    wc[words]+=1
  else:
    wc[words]=1
for words,count in wc.items():
    print(f"'{words}':{count}")

#4. Write a Python program to get a single string from two given strings, separatedbya space and swap the first two characters of each string.
a = (input("enter the first string:"))
b = (input("enter the second string:"))
a_new = b[0:2] + a[2:]
b_new = a[0:2] + b[2:]
ans = a_new + " " + b_new
print(ans)

#5.Write a Python program to add 'ing' at the end of a given string (length shouldbeat least 3). If the given string already ends with 'ing' then add 'ly' instead If thestring length of the given string is less than 3, leave it unchanged.
def add_string(s):
  length = len(s)
  if length > 2:
    if s[-3:] == 'ing':
      s += 'ly'
    else:
      s += 'ing'
  return s

print(add_string('ab'))
print(add_string('abc'))
print(add_string('string'))

#6.Write a Python program to find the first appearance of the substring 'not' and'poor' from a given string, if 'not' follows the 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string.
a = (input("enter the first string:"))
b=a.find('not')
c=a.find('poor')
if b != -1 and c != -1 and b < c:
    print(a[:b] + 'good' + a[c + 4:])
    print (a)

#7.Program to find Greatest Common Divisor of two numbers. For example, theGCD of 20 and 28 is 4 and the GCD of 98 and 56 is 14.
def gcd(a,b):
    res = min(a,b)
    while res:
      if a % res == 0 and b % res == 0 :
        break
      res -= 1
    return res
if __name__ == '__main__':
   a = int(input("Enter Values of A:"))
   b = int(input("Enter Values of B:"))
   print(f" GCD of {a} and {b} is {gcd(a,b)}")

#8.Write a Python program to check whether a list contains a sublist.
def is_sublist(main_list, sub_list):
    n, m = len(main_list), len(sub_list)

    if m == 0:
        return True  # Empty sublist is always present

    for i in range(n - m + 1):
        if main_list[i:i + m] == sub_list:
            return True
    return False

# Example usage
main_list = [1, 2, 3, 4, 5]
sub_list = [3, 4]

if is_sublist(main_list, sub_list):
    print("Sublist is present in the list.")
else:
    print("Sublist is not present in the list.")

#9.Write a Python program to find the second smallest number in a list.
li = [45,2,9,6,34,75,99,59,96]
li.sort()
print(f" Second Smallest:= {li[1]}")

#10. .Write a Python program to get unique values from a list.
my_list = [1, 2, 2, 3, 4, 4, 5, 1]
val = list(set(my_list))
print(val)

#11.Write a Python program to unzip a list of tuples into individual lists.
a=input("Enter numbers separated by spaces:=")
l1 = list(map(int,a.split()))
print("You Entered The List :=",l1)
s1 = list(set(l1))
print(s1)

#12.12.Write a Python program to convert a list of tuples into a dictionary.
l1 = [(1,"Jay"),(2,"Neha"),(3,"Ritu")]
print(type(l1))
dict_list = dict(l1)
type(dict_list)
print(dict_list)

#13.Write a Python program to sort a dictionary (ascending /descending) by value.
dic = {'Python':46,'Stat':89,'Excel':90,'SQL':50}
asding_dic = dict(sorted(dic.items(), key = lambda item : item[1]))
print(asding_dic)
disacsding_dic = dict(sorted(dic.items(), key = lambda  item: item[1],reverse=1))
print(disacsding_dic)

#14.Write a Python program to find the highest 3 values in a dictionary.
dic_val = {1:10,2:70,3:50,4:65,5:98}
asding_dic = dict(sorted(dic_val.items(), key = lambda item : item[1] , reverse = 1)[:3])
print(asding_dic)

#15.Given a number n, write a python program to make and print the list of Fibonacci
#series up to n. Input : n=7 Hint : first 7 numbers in the series Expected output :
#First few Fibonacci numbers are 0, 1, 1, 2, 3, 5, 8, 13
x = 10
n1 = 0
n2 = 7
print(f"Fibonacci Series:", n1, n2, end=" ")
for i in range(2, x):
    n3 = n1 + n2
    n1 = n2
    n2 = n3
    print(n3, end=" ")
print()

#16.Counting the frequencies in a list using a dictionary in Python. Input : [1, 1, 1, 5, 5, 3, 1, 3, 3, 1,4, 4, 4, 2, 2, 2, 2]
#Expected output : 1 : 5 , 2 : 4 , 3 : 3 , 4 : 3 , 5 : 2
# Input list
numbers = [1, 1, 1, 5, 5, 3, 1, 3, 3, 1, 4, 4, 4, 2, 2, 2, 2]
n = {}

for num in numbers:
    if num in n:
        n[num] += 1
    else:
        n[num] = 1

for key in sorted(n.keys()):
    print(f"{key} : {n[key]}", end=" , ")

#17.Write a python program using function to find the sum of odd series andeven series.
#Odd series: 12/ 1! +32/ 3! + 52/ 5!+……n
#Even series: 22/ 2! + 42/ 4! + 62/ 6!+……n
import math
def odd_series_sum(n):
    sum_odd = 0
    for i in range(1, 2*n, 2):  # Generate n odd numbers: 1, 3, 5,...
        term = (i ** 2) / math.factorial(i)
        sum_odd += term
    return sum_odd

def even_series_sum(n):
    sum_even = 0
    for i in range(2, 2*n + 1, 2):  # Generate n even numbers: 2, 4, 6,...
        term = (i ** 2) / math.factorial(i)
        sum_even += term
    return sum_even

# Input number of terms
n = int(input("Enter number of terms: "))
print(f"\nSum of Odd Series (first {n} terms): {odd_series_sum(n):.4f}")
print(f"Sum of Even Series (first {n} terms): {even_series_sum(n):.4f}")

#18. Python Program to Find Factorial of Number Using Recursion.
def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)
n = int(input("Enter a value:= "))
if n < 0:
    print("Not Factorial")
else:
    print(f"Factorial of {n} is {factorial(n)}")

#19.Write a Python function that takes a list and returns a new list with unique elements of the first list.
def get_unique_elements(input_list):
    return list(set(input_list))
sample_list = [1, 2, 2, 3, 4, 4, 5, 1, 6]
unique_list = get_unique_elements(sample_list)
print("Unique elements:", unique_list)

#20.Mini project :
 #Problem Statement : Password Generator
 #Make a program to generate a strong password using the input given by the user.
 #To generate a password, randomly take some words from the user input and then
 #include numbers, special characters and capital letters to generate the password.
 #Also, keep a check that password length is more than 8 characters.
#Note: Include Exception handling wherever required. Also, make a ‘User’ class
# and store the details like user id, name and password of each user as a tuple.
import random
import string
class User:
    def _init_(self, user_id, name, password):
        self.details = (user_id, name, password)
    def display_details(self):
        print(f"\nUser Details:\nUser ID: {self.details[0]}\nName: {self.details[1]}\nPassword: {self.details[2]}")

def generate_password(user_input):
    try:
        words = user_input.split()
        if len(words) < 2:
            raise ValueError("Please enter at least two words for better password strength.")

        # Select random words
        word_part = ''.join(random.choice(words).capitalize() for _ in range(2))

        # Add random digits and symbols
        digits = ''.join(random.choices(string.digits, k=2))
        symbols = ''.join(random.choices("!@#$%^&*()", k=2))

        # Combine and shuffle
        raw_password = list(word_part + digits + symbols)
        random.shuffle(raw_password)
        password = ''.join(raw_password)

        # Ensure password length > 8
        if len(password) < 8:
            extra_chars = ''.join(random.choices(string.ascii_letters + string.digits + "!@#$%", k=(8 - len(password))))
            password += extra_chars
        return password

    except Exception as e:
        print("Error generating password:", e)
        return None

# Main program
try:
    user_id = input("Enter User ID: ")
    name = input("Enter your name: ")
    user_input = input("Enter a few words about yourself: ")
    password = generate_password(user_input)
    if password:
        user = User(user_id, name, password)
        user.display_details()
    else:
        print("Failed to create password.")


except Exception as e:
    print("Something went wrong:", e)